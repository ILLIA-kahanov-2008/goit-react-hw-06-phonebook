{"version":3,"sources":["components/ContactForm/ContactForm.module.css","components/Filter/Filter.module.css","redux/phoneBook/phoneBook-actions.js","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","components/App/App.jsx","redux/phoneBook/phoneBook-reducer.js","redux/store.js","index.js"],"names":["module","exports","addNewContact","createAction","name","number","payload","id","shortid","generate","removeContact","filteringValue","connect","dispatch","addContact","contactName","contactNumber","phoneBookActions","useState","setName","setNumber","handleChange","e","target","value","className","styles","form","onSubmit","preventDefault","type","pattern","title","required","onChange","placeholder","Styles","styled","div","getFilteredContacts","allContacts","filter","normalizeFilter","toLowerCase","includes","contacts","items","filteredContacts","cbRemoveContact","handleClick","map","style","textTransform","onClick","filterInputValue","filterInputOnChange","App","createReducer","actions","state","some","contact","alert","_","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","contactsPersistConfig","key","storage","blacklist","store","configureStore","reducer","persistReducer","phoneBookReducer","devTools","process","persister","persistStore","ReactDOM","render","StrictMode","loading","persistor","document","getElementById"],"mappings":"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","file":"static/js/main.56713cd6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__3_gtc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filter\":\"Filter_filter__3B7bj\"};","import { createAction } from '@reduxjs/toolkit';\r\nimport shortid from 'shortid';\r\n\r\nconst addNewContact = createAction('contacts/add',\r\n  (name, number) => ({\r\n    payload: {\r\n    id: shortid.generate(),\r\n    name,\r\n    number,\r\n  },\r\n}))\r\n\r\nconst removeContact = createAction('contacts/remove');\r\n\r\nconst filteringValue = createAction('contacts/changeFilter');\r\n\r\n// eslint-disable-next-line\r\nexport default { addNewContact, removeContact, filteringValue };\r\n\r\n\r\n\r\n\r\n// -----without toolkit-----\r\n// import types from './phoneBook-types';\r\n// import shortid from 'shortid';\r\n\r\n// const addNewContact = (name, number) => ({\r\n//   type: types.ADD_CONTACT,\r\n//   payload: {\r\n//     id: shortid(),\r\n//     name,\r\n//     number,\r\n//   },\r\n// });\r\n\r\n// const removeContact = (id) => ({  \r\n//   type: types.REMOVE_CONTACT,\r\n//   payload: {\r\n//     id,\r\n//   },\r\n// })\r\n\r\n// const filteringValue = (value) => ({\r\n//   type: types.FILTER_CHANGE,\r\n//   payload: value\r\n  \r\n// })\r\n\r\n// // eslint-disable-next-line\r\n// export default { addNewContact, removeContact, filteringValue };","import { useState} from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n// import shortid from \"shortid\";\r\nimport { connect } from \"react-redux\";\r\nimport phoneBookActions from '../../redux/phoneBook/phoneBook-actions'\r\n\r\nimport styles from \"./ContactForm.module.css\";\r\n\r\nfunction ContactForm ({addContact}) {\r\n  const [name, setName] = useState('');\r\n  const [number, setNumber] = useState('');\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    switch (name) {\r\n      case \"name\":\r\n        setName(value)\r\n        break;\r\n    case \"number\":\r\n        setNumber(value)\r\n        break;\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();    \r\n    setName('');\r\n    setNumber('');\r\n    addContact(name, number);\r\n  };\r\n\r\n    return (\r\n      <form className={styles.form} onSubmit={handleSubmit}>\r\n        <label>\r\n          <p>Name</p>\r\n          <input\r\n            className=\"input\"\r\n            type=\"text\"\r\n            name=\"name\"\r\n            value={name}\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n            required\r\n            onChange={handleChange}\r\n            placeholder=\"Enter new contact name\"\r\n          />\r\n        </label>\r\n        <label>\r\n          <p>Number</p>\r\n          <input\r\n            className=\"input\"\r\n            type=\"tel\"\r\n            name=\"number\"\r\n            value={number}\r\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n            title=\"Номер телефона должен состоять из цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n            required\r\n            onChange={handleChange}\r\n            placeholder=\"Enter new contact number\"\r\n          />\r\n        </label>\r\n        <button className=\"button\" type=\"submit\">\r\n          Add contact\r\n        </button>\r\n      </form>\r\n    );\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  addContact: (contactName, contactNumber) =>\r\n    dispatch(phoneBookActions.addNewContact(contactName, contactNumber))\r\n})\r\n\r\nexport default connect(null, mapDispatchToProps)(ContactForm);\r\n\r\nContactForm.propTypes = {\r\n  addContact: PropTypes.func.isRequired,\r\n};\r\n\r\n","import PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport phoneBookActions from '../../redux/phoneBook/phoneBook-actions';\r\nimport styled from 'styled-components';\r\n\r\nconst Styles = styled.div`\r\n  .selector1 {\r\n    width: 95%;\r\n    border-collapse: collapse;\r\n    margin: 20px auto;\r\n  }\r\n  .selector2 {\r\n    background-color: rgb(63, 207, 243);\r\n    text-transform: uppercase;\r\n    color: #fff;\r\n  }\r\n  .selector3 {\r\n    line-height: 2;\r\n    border: 1px solid burlywood;\r\n    text-align: center;\r\n  }\r\n`;\r\nfunction ContactList({ cbRemoveContact, filteredContacts }) {\r\n  const handleClick = e => cbRemoveContact(e.target.id);\r\n  return (\r\n    <Styles>\r\n      <table className=\"selector1\">\r\n        <thead className=\"selector2\">\r\n          <tr>\r\n            <th className=\"selector3\">Name</th>\r\n            <th className=\"selector3\">Phone Number</th>\r\n            <th className=\"selector3\">Etc.</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {filteredContacts.map(({ id, name, number }) => (\r\n            <tr key={id}>\r\n              <td className=\"selector3\" style={{ textTransform: 'capitalize' }}>\r\n                {name}\r\n              </td>\r\n              <td className=\"selector3\">{number}</td>\r\n              <td className=\"selector3\">\r\n                <button\r\n                  className=\"button\"\r\n                  type=\"button\"\r\n                  onClick={handleClick}\r\n                  id={id}\r\n                >\r\n                  Delete contact\r\n                </button>\r\n              </td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    </Styles>\r\n  );\r\n}\r\n\r\nconst getFilteredContacts = (allContacts, filter) => {\r\n  const normalizeFilter = filter.toLowerCase();\r\n  return allContacts.filter(({ name }) =>\r\n    name.toLowerCase().includes(normalizeFilter),\r\n  );\r\n};\r\n\r\nconst mapStateToProps = ({ contacts: { items, filter } }) => ({\r\n  filteredContacts: getFilteredContacts(items, filter),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  cbRemoveContact: id => dispatch(phoneBookActions.removeContact(id)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n    }),\r\n  ),\r\n  cbRemoveContact: PropTypes.func.isRequired,\r\n};\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport phoneBookActions from \"../../redux/phoneBook/phoneBook-actions\";\r\n\r\nimport styles from \"./Filter.module.css\";\r\n\r\nFilter.propTypes = {\r\n  filterInputValue: PropTypes.string,\r\n  filterInputOnChange: PropTypes.func.isRequired,\r\n};\r\n\r\nfunction Filter({ filterInputValue, filterInputOnChange }) {\r\n  return (\r\n    <label className={styles.filter}>\r\n      <p className=\"label\">Find contacts by name</p>\r\n      <input\r\n        className=\"input\"\r\n        type=\"text\"\r\n        name=\"filter\"\r\n        value={filterInputValue}\r\n        onChange={filterInputOnChange}\r\n        placeholder=\"Enter query name\"\r\n      />\r\n    </label>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = ({contacts:{filter}}) => ({\r\n  filterInputValue: filter,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  filterInputOnChange: (e) => dispatch(phoneBookActions.filteringValue(e.target.value))\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","// import { useState, useMemo } from \"react\";\r\n// import { useLS } from '../../hooks/useLS';\r\nimport ContactForm from \"../ContactForm/ContactForm\";\r\nimport ContactList from \"../ContactList/ContactList\";\r\nimport Filter from \"../Filter/Filter\";\r\n\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n     return (\r\n      <div className=\"App\">\r\n        <h1>PhoneBook</h1>\r\n        <ContactForm />\r\n        <h2>Contacts</h2>\r\n        <div className=\"Contacts\">\r\n          <Filter />\r\n          <ContactList/>\r\n          </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\nexport default App;\r\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from \"@reduxjs/toolkit\";\r\nimport actions from './phoneBook-actions' \r\n\r\n\r\nconst items = createReducer([], {\r\n  [actions.addNewContact]: (state, { payload }) => {\r\n    const isExists = state.some(\r\n        (contact) => contact.name.toLowerCase() === payload.name.toLowerCase()\r\n      )\r\n      return isExists ? alert(`${payload.name} is already in contacts`)\r\n        : [...state, payload];\r\n  },\r\n  [actions.removeContact]: (state, {payload}) =>\r\n    state.filter(({ id }) => id !== payload)\r\n})\r\n\r\n\r\nconst filter = createReducer('',\r\n  {\r\n    [actions.filteringValue]: (_, { payload }) => payload,\r\n  }\r\n)\r\n\r\nexport default combineReducers({\r\n  items,\r\n  filter,\r\n});\r\n\r\n\r\n\r\n\r\n// -----without toolkit-----\r\n// import { combineReducers } from 'redux';\r\n// import types from './phoneBook-types';\r\n\r\n// const items = (state = [], { type, payload }) => {\r\n//   switch (type) {\r\n//     case types.ADD_CONTACT:\r\n//       const isExists = state.some(\r\n//         (contact) => contact.name.toLowerCase() === payload.name.toLowerCase()\r\n//       )\r\n//       return isExists ? alert(`${payload.name} is already in contacts`)\r\n//         : [...state, payload];\r\n//     case types.REMOVE_CONTACT:\r\n//       return state.filter(({id}) => id !== payload.id);\r\n//     default:\r\n//       return state;\r\n//   }  \r\n// }\r\n\r\n// const filter = (state = '', { type, payload }) => {\r\n//   switch (type) {\r\n//     case types.FILTER_CHANGE:\r\n//       return payload;\r\n//     default:\r\n//       return state\r\n//   }  \r\n// }\r\n\r\n// export default combineReducers({\r\n//   items,\r\n//   filter,\r\n// });\r\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\nimport phoneBookReducer from './phoneBook/phoneBook-reducer';\r\n\r\nconst middleware = [...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  })]\r\n\r\n  const contactsPersistConfig = {\r\n  key: 'contacts',\r\n  storage,\r\n  blacklist: ['filter'],\r\n};\r\n\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: persistReducer(contactsPersistConfig, phoneBookReducer),\r\n  },\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === 'development'\r\n},\r\n)\r\n\r\nconst persister = persistStore(store);\r\n\r\n// eslint-disable-next-line\r\nexport default { store, persister };\r\n\r\n\r\n\r\n// -----without toolkit-----\r\n\r\n// import { createStore, combineReducers} from 'redux'; //\r\n// import { composeWithDevTools } from 'redux-devtools-extension';\r\n// import phoneBookReducer from './phoneBook/phoneBook-reducer';\r\n\r\n\r\n// const rootReducer = combineReducers({\r\n//   contacts: phoneBookReducer,\r\n// });\r\n\r\n// const store = createStore(rootReducer, composeWithDevTools());\r\n\r\n// export default store;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Provider } from 'react-redux';\r\nimport { PersistGate } from \"redux-persist/integration/react\";\r\nimport App from \"./components/App/App.jsx\";\r\nimport store from './redux/store';\r\n\r\nimport \"./index.css\";\r\n\r\n// console.log('store :>> ', store.getState());\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store.store}>\r\n      <PersistGate loading=\"Loading state...\" persistor={store.persister}>\r\n      <App />\r\n      </PersistGate>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}